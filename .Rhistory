print(x)
x <- 1
# Creates x variable with value of 1
print(x)
# Explicit print command, returns value of x:
#  [1] 1 -> where 1 is the first element, represented by the [1], meaning x is a vector, for now, 1x1
x <- 1:20
# Generates sequence from 1 to 20: [1,20] in Natral numbers.
x <- 1:20
# Generates sequence from 1 to 20: [1,20] in Natral numbers.
x
vector(mode = "numeric", length = 5)
# vector(mode = " ", lenght = n) is a function that created empty vectors. Inputs are: mode (from class, quoted), and lenght (n is the length, integer)
5L
# If we want an integer, we specify so by addign the suffix "L"
attribute(x)
attributes(x)
# Acces attributes of vec. x
5L
# If we want an integer, we specify so by addign the suffix "L"
vector(mode = "numeric", length = 5)
# vector(mode = " ", lenght = n) is a function that created empty vectors. Inputs are: mode (from class, quoted), and lenght (n is the length, integer)
print(x)
# Explicit print command, returns value of x:
#  [1] 1 -> where 1 is the first element, represented by the [1], meaning x is a vector, for now, 1x1
x
# Autoprinting command, returns same as print(x)
x <- 1:20
# Generates sequence from 1 to 20: [1,20] in Natral numbers.
x
x <- 1
# Creates x variable with value of 1
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
x <- 1:5
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
x = vector(mode = "numeric", length = 5)
# vector(mode = " ", lenght = n) is a function that created empty vectors. Inputs are: mode (from class, quoted), and lenght (n is the length, integer)
x = vector(mode = "numeric", length = 5)
# vector(mode = " ", lenght = n) is a function that created empty vectors. Inputs are: mode (from class, quoted), and lenght (n is the length, integer)
x = vector(mode = "numeric", length = 5)
# vector(mode = " ", lenght = n) is a function that created empty vectors. Inputs are: mode (from class, quoted), and lenght (n is the length, integer)
x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
attributes(x)
# Acces attributes of vec. x
x = vector(mode = "numeric", length = 5)
# vector(mode = " ", lenght = n) is a function that created empty vectors. Inputs are: mode (from class, quoted), and lenght (n is the length, integer)
x
attributes(x)
v1 <- c (0.5, 0.4)
v1 #NUMERIC
v2 <- c (TRUE, FALSE)
v2 #LOGIC
v3 <- c (T, F)
v3 #LOGIC
v4 <- c ("a", "b", "c")
v4 #CHARACTER
v5 <- 9:29
v5 #INTEGER
v6 <- c (1+i, 6-12i)
i
v1 <- c (0.5, 0.4)
v1 #NUMERIC
v2 <- c (TRUE, FALSE)
v2 #LOGIC
v3 <- c (T, F)
v3 #LOGIC
v4 <- c ("a", "b", "c")
v4 #CHARACTER
v5 <- 9:29
v5 #INTEGER
v6 <- c (complex(real = 1, imaginary = 1), complex (real = 6, imaginary = 12))
v6 #COMPLEX
x <- c (TRUE, FALSE, 0, 1L, 2, 5.03927, "Amiens", "Tahrir", "Complex", complex(real = 1, imaginary = 1))
x
x <- c (TRUE, F, 0, 1L, 2, 5.03927, "Amiens", "Tahrir", "Complex", complex(real = 1, imaginary = 1))
x
x <- c (TRUE, F, 0, 1L, 2, 5.03927, "Amiens", "Tahrir", "Complex", complex(real = 1, imaginary = 1))
#x contains all classes of objects within itself
x1 <- as.character(x)
#x vector as character
x2 <- as.numeric(x)
#x vector as numeric
x3 <- as.logical(x)
#x vector as logical
x4 <- as.complex(x)
#x vector as complex
x <- c (TRUE, F, 0, 1L, 2, 5.03927, "Amiens", "Tahrir", "Complex", complex(real = 1, imaginary = 1))
#x contains all classes of objects within itself
x1 <- as.character(x)
#x vector as character
x1
x2 <- as.numeric(x)
#x vector as numeric
x2
x3 <- as.logical(x)
#x vector as logical
x3
x4 <- as.complex(x)
#x vector as complex
x4
x <- c (TRUE, F, 0, 1L, 2, 5.03927, "Amiens", "Tahrir", "Complex", complex(real = 1, imaginary = 1))
#x contains all classes of objects within itself
as.character(x)
#x vector as character
as.numeric(x)
#x vector as numeric
as.logical(x)
#x vector as logical
as.complex(x)
#x vector as complex
L1 <- list (1, "a", TRUE, complex (real = 1, imaginary = 5))
L1
m <- matrix (nrow = 2, ncol = 3)
m
m <- matrix (1:6, nrow = 2, ncol = 3)
m
m <- 1:6
m
# This generates the sequence from 1 to 6
dim (m) <- c (2, 3)
# Here we modify the dimensions of m from 1x1 to 2x3, yielding:
m
x <- c (1, 2, 3, 5, 8)
y <- x/e
x <- c (1, 2, 3, 5, 8)
y <- x/exp(1)
cbind(x,y)
x <- c (1, 2, 3, 5, 8)
y <- exp(x)
rbind(x,y)
f <- factor (c ("yes", "yes", "no", "yes, "no", "N/A"))
f <- factor (c ("yes", "yes", "no", "yes", "no", "N/A"))
table(f)
f <- factor (c ("yes", "yes", "no", "yes", "no", "n/a"))
f
table(f)
unclass(f)
f <- factor (c ("yes", "yes", "no", "yes", "no", "n/a"), levels = c ("yes", "no", "n/a"))
# Here, our baseline level is "yes", but we determined the order for "no" and "n/a"
f <- factor (c ("yes", "yes", "no", "yes", "no", "n/a"), levels = c ("yes", "no", "n/a"))
# Here, our baseline level is "yes", but we determined the order for "no" and "n/a"
f
x <- c (1:5)
x <- c (1:5)
x
x <- c (0:5)
x <- c (0:5)
fx <- (x+1)/(x-2)(x-5)
x <- c (0:5)
fx <- (x+1)/(x-2)(x-5)
x <- c (0:5)
f <- (x+1)/(x-2)(x-5)
x <- c (0:5)
f <- (x+1)
fx
x <- c (0:5)
f <- (x+1)
f
x <- c (0:5)
f <- (x+1)/(x-2)
f
x <- c (0:5)
f <- (x-3)/(x-2)*(x)
f
x <- c (0:5)
f <- ln(x)/(x-2)*(x)
x <- c (0:5)
f <- log(x)/(x-2)*(x)
f
x <- c (0,2,5,NA,10,1,NaN,0.2)
is.na(x)
is.na(x)
x <- c (0,2,5,NA,10,1,NaN,0.2)
is.na(x)
is.nan(x)
x <- data.frame (first = 1:4, second = c (T, F, F, T))
x
nrow(x)
ncol(x)
x <- c (1:4)
names(x)
names(x) <- c ("Fran", "Maggie", "Brightnon", "Gracie")
x
names(x)
x <- list(a = 1, b = 2, c = 3)
x
x <- list(Fran = 1, Maggie = 2, Brighton = 3, Gracie = 4)
x
m <- matrix (1:10, nrow = 2, ncol = 5)
dimnames (m) <- list (c( "Fran", "Maggie"),c("Brigthton", "Gracie", "Third", "Fourth", "Fifth"))
m <- matrix (1:10, nrow = 2, ncol = 5)
dimnames (m) <- list (c( "Fran", "Maggie"),c("Brigthton", "Gracie", "Third", "Fourth", "Fifth"))
m
install.tinitex()
install_tinitex()
install_tinytex()
tinytex::install_tinytex()
